name: CI

on: [ push, pull_request ]

jobs:
  windows:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository
        key: ${{ runner.os }}-cache-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-cache-
    - run: choco install innosetup
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: temurin
    - uses: ilammy/msvc-dev-cmd@v1 # for nmake
      with:
        arch: x64
    - name: build detours x64
      shell: cmd
      run: |
        cd detours/src
        nmake
    - uses: ilammy/msvc-dev-cmd@v1 # for nmake
      with:
        arch: x86
    - name: build detours x86
      shell: cmd
      run: |
        cd detours/src
        nmake
    - uses: ilammy/msvc-dev-cmd@v1 # for nmake
      with:
        arch: amd64_arm64
    - name: build detours aarch64
      shell: cmd
      run: |
        cd detours/src
        nmake
    - name: build dll x64
      shell: cmd
      run: |
        cmake -S native -B native/build64 -A x64
        cmake --build native/build64 --config Release
    - name: build dll x86
      shell: cmd
      run: |
        cmake -S native -B native/build32 -A Win32
        cmake --build native/build32 --config Release
    - name: build dll aarch64
      shell: cmd
      run: |
        cmake -S native -B native/buildaarch64 -A ARM64
        cmake --build native/buildaarch64 --config Release
    - name: build launcher
      run: mvn verify -B
    - name: x64 installer
      shell: bash
      run: ./build-win64.sh
    - name: x86 installer
      shell: bash
      run: ./build-win32.sh
    - name: AArch64 installer
      shell: bash
      run: ./build-win-aarch64.sh
    - uses: actions/upload-artifact@v4
      with:
        name: windows
        path: |
          NexusSetup64.exe
          NexusSetup32.exe
          NexusSetupAArch64.exe
        if-no-files-found: error
  linux:
    runs-on: ubuntu-20.04
    steps:
      - run: sudo apt update
      - run: sudo apt install -y gcc-9-aarch64-linux-gnu g++-9-aarch64-linux-gnu
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-cache-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-cache-
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: build
        run: mvn verify -B
      - name: cmod linux-x64
        run: chmod +x ./build-linux-x86_64.sh
      - name: linux-x64
        run: ./build-linux-x86_64.sh
      - name: cmod linux-x64_64
        run: chmod +x ./build-linux-aarch64.sh
      - name: linux-aarch64
        run: ./build-linux-aarch64.sh
      - uses: actions/upload-artifact@v3
        with:
          name: jar
          path: target/Nexus.jar
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            Nexus.AppImage
            Nexus-aarch64.AppImage
          if-no-files-found: error
    macos:
      runs-on: macos-11
      steps:
        - uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        - uses: actions/checkout@v3
          with:
            submodules: 'true'
        - name: cache
          uses: actions/cache@v3
          with:
            path: |
              ~/.m2/repository
            key: ${{ runner.os }}-cache-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-cache-
        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: 11
            distribution: temurin
        - name: build
          run: mvn verify -B
        - name: clone create-dmg
          run: git clone https://github.com/runelite/create-dmg -b runelite-1.0
        - name: build create-dmg
          run: |
            set -e
            cd create-dmg
            npm install
            ln -s cli.js create-dmg
            chmod +x create-dmg
        - run: echo create-dmg >> $GITHUB_PATH
        - name: cmod macos-x64
          run: chmod +x ./build-osx-x64.sh
        - name: macos-x64
          run: ./build-osx-x64.sh --build --dmg
        - name: cmod macos-aarch64
          run: chmod +x ./build-osx-aarch64.sh
        - name: macos-aarch64
          run: ./build-osx-aarch64.sh --build --dmg
        # tar app to keep permissions correct
        - name: tar app
          run: tar -cf app.tar build/macos-x64/Nexus.app build/macos-aarch64/Nexus.app build-osx-x64.sh build-osx-aarch64.sh osx/signing.entitlements
        - uses: actions/upload-artifact@v3
          with:
            name: macos-dmg
            path: |
              Nexus-x64.dmg
              Nexus-aarch64.dmg
            if-no-files-found: error
        - uses: actions/upload-artifact@v3
          with:
            name: macos-app
            path: |
              app.tar
            if-no-files-found: error